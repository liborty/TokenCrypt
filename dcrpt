#!/bin/bash
# decrypts all files in the specified directory 'dirname'
# using corresponding keys in the specified directory 'keysname'
# into corresponding original files in local directory 'dirname_org' 

PROGN=${0##*/}
case $# in
	0|1)
		printf "$PROGN quitting, needs keysdir encrypteddir\n" 
		exit 2;; 
	2)
      if ! [ -d "$1" ]; then
		printf "$PROGN quitting, keys directory $1 not found\n"
		exit 2; fi
		if ! [ -d "$2" ]; then
		printf "$PROGN quitting, encrypted directory $2 not found\n"
		exit 2; fi;;		
	*) 
		printf "$PROGN quitting, needs keysdir encrypteddir\n" 
		exit 2;;
esac

KEYDIR="$1"
INDIR="$2"
FAILED=0
OUTDIR=${2##*/} # just the last directory name, path is stripped off
# if the indir ending is standard _crp, then remove it from outdir
if [ "${OUTDIR##*_}" == 'crp' ]; then OUTDIR=${OUTDIR%_*}; fi
OUTDIR="$OUTDIR"_org # in any case append _org, i.e. original files reconstructed

# make output directory for all decrypted files
if [ -d "$OUTDIR" ]; then 
	printf "$PROGN quitting, '$OUTDIR' already exists here!\n"; exit 2
else mkdir $OUTDIR; fi

# decompress all files in INDIR
for INFILE in $INDIR/*; do
   [ -f "$INFILE" ] || continue # check that the selected item is a file
   let COUNT+=1
   FILEND=${INFILE##*/} # original filename.extensions sans the preceding path
   KEYFILE=$KEYDIR/$FILEND
   OUTFILE=$OUTDIR/$FILEND
   
   if [ -f $KEYFILE ]; then # found key with no extra extensions
		symcrypt $KEYFILE $INFILE $OUTFILE # just decrypt the infile and save it
		continue
	fi
	if [ -f $KEYFILE.hex ]; then # found hexed extension
		symcrypt $KEYFILE.hex $INFILE | xxd -p > $OUTFILE 
		continue
	fi
	if [ -f $KEYFILE.zst ]; then # found compressed nonhex
		symcrypt $KEYFILE.zst $INFILE | zstd -d -c > $OUTFILE
		continue
	fi
	if [ -f $KEYFILE.hex.zst ]; then # found hexed and compressed
		symcrypt $KEYFILE.hex.zst $INFILE | zstd -d -c | xxd -p > $OUTFILE
		continue
	fi
		if [ -f $KEYFILE.lz ]; then # found lzma compressed, nonhex
		symcrypt $KEYFILE.lz $INFILE | lzma -d > $OUTFILE
		continue
	fi
	if [ -f $KEYFILE.hex.lz ]; then # found hexed and lzma compressed
		symcrypt $KEYFILE.hex.lz $INFILE | lzma -d | xxd -p > $OUTFILE
		continue
	fi
	printf "$PROGN failed to find a useful key for encrypted file $FILEND\n"
	let COUNT-=1
	let FAILED+=1
done
printf "$PROGN: decrypted $COUNT files into $OUTDIR, $FAILED failures\n"
